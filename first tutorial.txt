mkdir -p ~/ros_workspace/src
cd ~/ros_workspace/src
catkin_init_workspace

cd ~/ros_workspace

catkin_make

catkin_create_pkg package_name [required packages]

cd ~/ros_workspace/src 
catkin_create_pkg tutorial_pkg roscpp

touch ~/ros_workspace/src/tutorial_pkg/src/tutorial_pkg_node.cpp

* publishing a topic 
------------------------------------------------------------------------------
#include <ros/ros.h>

int main(int argc, char **argv)
{
    ros::init(argc, argv, "example_node");
    ros::NodeHandle n("~");
    ros::Rate loop_rate(50);
    while (ros::ok())
    {
        ros::spinOnce();
        loop_rate.sleep();
    }
}

-------------------------------------------------------------------------------

* edit CMakeLists.txt from tutorial_pkg directory. 
* Find line: # add_compile_options(-std=c++11), # add_executable(${PROJECT_NAME}_node src/tutorial_pkg_node.cpp)

# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

* (remove # sign).
*******************************************************************************


cd ~/ros_workspace 
catkin_make

source ~/ros_workspace/devel/setup.sh

* OR  . ~/ros_workspace/devel/setup.sh
Copy
to your .bashrc file.

rosrun tutorial_pkg tutorial_pkg_node

* If you want to use .launch files associated with your custom package you will have to create launch directory:

mkdir ~/ros_workspace/src/tutorial_pkg/launch

 RUN THE LAUNCH FILE roslaunch tutorial_pkg your_launch_file.launch

Save it as tutorial_pkg_node.launch in ~/ros_workspace/src/tutorial_pkg/launch directory and launch it:

roslaunch tutorial_pkg tutorial_pkg_node.launch

------------------------------------------------------------------------------------
done 

* subscribing to a topic 
You will modify your node to subscribe to topic /camera/rgb/image_raw and calculate average brightness of image.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <ros/ros.h>
#include <sensor_msgs/Image.h>
#include <std_msgs/UInt8.h>
#include <std_srvs/Empty.h>
#include <std_srvs/Trigger.h>

bool print_b;                           // receive param store its value 
ros::Publisher brightness_pub;
int frames_passed = 0;
int saved_imgs = 0;

void imageCallback(const sensor_msgs::ImageConstPtr &image)     // arg is pointer to incoming message 
{
   long long sum = 0;                                           // variable for storing sum of all pixel values 
   for (int value : image->data)                            // iterate through every pixel and color 
   {
      sum += value;                                     // add current pixel value to sum 
   }
   int avg = sum / image->data.size();          // calculate the avg value 
   if (print_b)                                    // print if value is recieved 
   {
      std::cout << "Brightness: " << avg << std::endl;          // print brightness value to screen 
   }
   std_msgs::UInt8 brightness_value;
   brightness_value.data = avg;
   brightness_pub.publish(brightness_value);
   frames_passed++;
}

bool saved_img(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res)
{
   res.success = 1;
   std::string str("Saved images: ");
   std::string num = std::to_string(saved_imgs);
   str.append(num);
   res.message = str;
   return true;
}

int main(int argc, char **argv)
{
   ros::init(argc, argv, "example_node");
   ros::NodeHandle n("~");                      // subscribe is method of node handler 
   ros::Subscriber sub = n.subscribe("/camera/rgb/image_raw", 10, imageCallback);  // define topic to subscribe imag raw is name of topic, 10 is msg queue size 
                                                            // call back function to process incoming messages 
   n.param<bool>("print_brightness", print_b, false);       // recieve paramter value , method param of node handle 
   brightness_pub = n.advertise<std_msgs::UInt8>("brightness", 1);
   ros::ServiceClient client = n.serviceClient<std_srvs::Empty>("/image_saver/save");
   std_srvs::Empty srv;
   ros::ServiceServer service = n.advertiseService("saved_images", saved_img);
   ros::Rate loop_rate(50);
   while (ros::ok())
   {
      ros::spinOnce();
      if (frames_passed > 100)
      {
         frames_passed = 0;
         client.call(srv);
         saved_imgs++;
      }
      loop_rate.sleep();
   }
}
______________________________________________________________________________________


* go to launch folder 
vim tutorial_2.launch
---------------------------
<launch>

    <arg name="use_gazebo" default="false"/>

    <include unless="$(arg use_gazebo)" file="$(find astra_launch)/launch/astra.launch"/>
    <include if="$(arg use_gazebo)" file="$(find rosbot_description)/launch/rosbot.launch"/>

    <include file="$(find tutorial_pkg)/launch/tutorial_pkg_node.launch"/>

</launch>
-------------------------------

* gazebo sim 

roslaunch tutorial_pkg tutorial_2.launch use_gazebo:=true

